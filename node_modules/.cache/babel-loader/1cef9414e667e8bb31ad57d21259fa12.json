{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-empty-function, no-process-env */\n\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar Observable = require('@sanity/observable/minimal');\n\nvar _require = require('./errors'),\n    ClientError = _require.ClientError,\n    ServerError = _require.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  } // Environment-specific middleware.\n\n};\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;","map":null,"metadata":{},"sourceType":"script"}